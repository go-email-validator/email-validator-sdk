<?php
/**
 * CheckIfEmailExistResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CheckIfEmailExistResult Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckIfEmailExistResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckIfEmailExistResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'input' => 'string',
'is_reachable' => 'string',
'misc' => '\Swagger\Client\Model\CheckIfEmailExistMisc',
'mx' => '\Swagger\Client\Model\CheckIfEmailExistMX',
'smtp' => '\Swagger\Client\Model\CheckIfEmailExistSMTP',
'syntax' => '\Swagger\Client\Model\CheckIfEmailExistSyntax',
'error' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'input' => null,
'is_reachable' => null,
'misc' => null,
'mx' => null,
'smtp' => null,
'syntax' => null,
'error' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input' => 'input',
'is_reachable' => 'is_reachable',
'misc' => 'misc',
'mx' => 'mx',
'smtp' => 'smtp',
'syntax' => 'syntax',
'error' => 'error'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input' => 'setInput',
'is_reachable' => 'setIsReachable',
'misc' => 'setMisc',
'mx' => 'setMx',
'smtp' => 'setSmtp',
'syntax' => 'setSyntax',
'error' => 'setError'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input' => 'getInput',
'is_reachable' => 'getIsReachable',
'misc' => 'getMisc',
'mx' => 'getMx',
'smtp' => 'getSmtp',
'syntax' => 'getSyntax',
'error' => 'getError'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input'] = isset($data['input']) ? $data['input'] : null;
        $this->container['is_reachable'] = isset($data['is_reachable']) ? $data['is_reachable'] : null;
        $this->container['misc'] = isset($data['misc']) ? $data['misc'] : null;
        $this->container['mx'] = isset($data['mx']) ? $data['mx'] : null;
        $this->container['smtp'] = isset($data['smtp']) ? $data['smtp'] : null;
        $this->container['syntax'] = isset($data['syntax']) ? $data['syntax'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input
     *
     * @return string
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param string $input input
     *
     * @return $this
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets is_reachable
     *
     * @return string
     */
    public function getIsReachable()
    {
        return $this->container['is_reachable'];
    }

    /**
     * Sets is_reachable
     *
     * @param string $is_reachable is_reachable
     *
     * @return $this
     */
    public function setIsReachable($is_reachable)
    {
        $this->container['is_reachable'] = $is_reachable;

        return $this;
    }

    /**
     * Gets misc
     *
     * @return \Swagger\Client\Model\CheckIfEmailExistMisc
     */
    public function getMisc()
    {
        return $this->container['misc'];
    }

    /**
     * Sets misc
     *
     * @param \Swagger\Client\Model\CheckIfEmailExistMisc $misc misc
     *
     * @return $this
     */
    public function setMisc($misc)
    {
        $this->container['misc'] = $misc;

        return $this;
    }

    /**
     * Gets mx
     *
     * @return \Swagger\Client\Model\CheckIfEmailExistMX
     */
    public function getMx()
    {
        return $this->container['mx'];
    }

    /**
     * Sets mx
     *
     * @param \Swagger\Client\Model\CheckIfEmailExistMX $mx mx
     *
     * @return $this
     */
    public function setMx($mx)
    {
        $this->container['mx'] = $mx;

        return $this;
    }

    /**
     * Gets smtp
     *
     * @return \Swagger\Client\Model\CheckIfEmailExistSMTP
     */
    public function getSmtp()
    {
        return $this->container['smtp'];
    }

    /**
     * Sets smtp
     *
     * @param \Swagger\Client\Model\CheckIfEmailExistSMTP $smtp smtp
     *
     * @return $this
     */
    public function setSmtp($smtp)
    {
        $this->container['smtp'] = $smtp;

        return $this;
    }

    /**
     * Gets syntax
     *
     * @return \Swagger\Client\Model\CheckIfEmailExistSyntax
     */
    public function getSyntax()
    {
        return $this->container['syntax'];
    }

    /**
     * Sets syntax
     *
     * @param \Swagger\Client\Model\CheckIfEmailExistSyntax $syntax syntax
     *
     * @return $this
     */
    public function setSyntax($syntax)
    {
        $this->container['syntax'] = $syntax;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

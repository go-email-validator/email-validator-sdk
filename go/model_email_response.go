/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EmailResponse - struct for EmailResponse
type EmailResponse struct {
	CheckIfEmailExistResult *CheckIfEmailExistResult
	MailboxvalidatorResult *MailboxvalidatorResult
	PromptEmailVerificationApiResult *PromptEmailVerificationApiResult
}

// CheckIfEmailExistResultAsEmailResponse is a convenience function that returns CheckIfEmailExistResult wrapped in EmailResponse
func CheckIfEmailExistResultAsEmailResponse(v *CheckIfEmailExistResult) EmailResponse {
	return EmailResponse{ CheckIfEmailExistResult: v}
}

// MailboxvalidatorResultAsEmailResponse is a convenience function that returns MailboxvalidatorResult wrapped in EmailResponse
func MailboxvalidatorResultAsEmailResponse(v *MailboxvalidatorResult) EmailResponse {
	return EmailResponse{ MailboxvalidatorResult: v}
}

// PromptEmailVerificationApiResultAsEmailResponse is a convenience function that returns PromptEmailVerificationApiResult wrapped in EmailResponse
func PromptEmailVerificationApiResultAsEmailResponse(v *PromptEmailVerificationApiResult) EmailResponse {
	return EmailResponse{ PromptEmailVerificationApiResult: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EmailResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CheckIfEmailExistResult
	err = json.Unmarshal(data, &dst.CheckIfEmailExistResult)
	if err == nil {
		jsonCheckIfEmailExistResult, _ := json.Marshal(dst.CheckIfEmailExistResult)
		if string(jsonCheckIfEmailExistResult) == "{}" { // empty struct
			dst.CheckIfEmailExistResult = nil
		} else {
			match++
		}
	} else {
		dst.CheckIfEmailExistResult = nil
	}

	// try to unmarshal data into MailboxvalidatorResult
	err = json.Unmarshal(data, &dst.MailboxvalidatorResult)
	if err == nil {
		jsonMailboxvalidatorResult, _ := json.Marshal(dst.MailboxvalidatorResult)
		if string(jsonMailboxvalidatorResult) == "{}" { // empty struct
			dst.MailboxvalidatorResult = nil
		} else {
			match++
		}
	} else {
		dst.MailboxvalidatorResult = nil
	}

	// try to unmarshal data into PromptEmailVerificationApiResult
	err = json.Unmarshal(data, &dst.PromptEmailVerificationApiResult)
	if err == nil {
		jsonPromptEmailVerificationApiResult, _ := json.Marshal(dst.PromptEmailVerificationApiResult)
		if string(jsonPromptEmailVerificationApiResult) == "{}" { // empty struct
			dst.PromptEmailVerificationApiResult = nil
		} else {
			match++
		}
	} else {
		dst.PromptEmailVerificationApiResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CheckIfEmailExistResult = nil
		dst.MailboxvalidatorResult = nil
		dst.PromptEmailVerificationApiResult = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(EmailResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(EmailResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EmailResponse) MarshalJSON() ([]byte, error) {
	if src.CheckIfEmailExistResult != nil {
		return json.Marshal(&src.CheckIfEmailExistResult)
	}

	if src.MailboxvalidatorResult != nil {
		return json.Marshal(&src.MailboxvalidatorResult)
	}

	if src.PromptEmailVerificationApiResult != nil {
		return json.Marshal(&src.PromptEmailVerificationApiResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EmailResponse) GetActualInstance() (interface{}) {
	if obj.CheckIfEmailExistResult != nil {
		return obj.CheckIfEmailExistResult
	}

	if obj.MailboxvalidatorResult != nil {
		return obj.MailboxvalidatorResult
	}

	if obj.PromptEmailVerificationApiResult != nil {
		return obj.PromptEmailVerificationApiResult
	}

	// all schemas are nil
	return nil
}

type NullableEmailResponse struct {
	value *EmailResponse
	isSet bool
}

func (v NullableEmailResponse) Get() *EmailResponse {
	return v.value
}

func (v *NullableEmailResponse) Set(val *EmailResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailResponse(val *EmailResponse) *NullableEmailResponse {
	return &NullableEmailResponse{value: val, isSet: true}
}

func (v NullableEmailResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



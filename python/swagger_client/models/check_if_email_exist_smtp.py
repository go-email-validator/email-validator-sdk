# coding: utf-8

"""
    Email Validator

    All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CheckIfEmailExistSMTP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_connect_smtp': 'bool',
        'has_full_inbox': 'bool',
        'is_catch_all': 'bool',
        'is_deliverable': 'bool',
        'is_disabled': 'bool'
    }

    attribute_map = {
        'can_connect_smtp': 'can_connect_smtp',
        'has_full_inbox': 'has_full_inbox',
        'is_catch_all': 'is_catch_all',
        'is_deliverable': 'is_deliverable',
        'is_disabled': 'is_disabled'
    }

    def __init__(self, can_connect_smtp=None, has_full_inbox=None, is_catch_all=None, is_deliverable=None, is_disabled=None):  # noqa: E501
        """CheckIfEmailExistSMTP - a model defined in Swagger"""  # noqa: E501
        self._can_connect_smtp = None
        self._has_full_inbox = None
        self._is_catch_all = None
        self._is_deliverable = None
        self._is_disabled = None
        self.discriminator = None
        if can_connect_smtp is not None:
            self.can_connect_smtp = can_connect_smtp
        if has_full_inbox is not None:
            self.has_full_inbox = has_full_inbox
        if is_catch_all is not None:
            self.is_catch_all = is_catch_all
        if is_deliverable is not None:
            self.is_deliverable = is_deliverable
        if is_disabled is not None:
            self.is_disabled = is_disabled

    @property
    def can_connect_smtp(self):
        """Gets the can_connect_smtp of this CheckIfEmailExistSMTP.  # noqa: E501


        :return: The can_connect_smtp of this CheckIfEmailExistSMTP.  # noqa: E501
        :rtype: bool
        """
        return self._can_connect_smtp

    @can_connect_smtp.setter
    def can_connect_smtp(self, can_connect_smtp):
        """Sets the can_connect_smtp of this CheckIfEmailExistSMTP.


        :param can_connect_smtp: The can_connect_smtp of this CheckIfEmailExistSMTP.  # noqa: E501
        :type: bool
        """

        self._can_connect_smtp = can_connect_smtp

    @property
    def has_full_inbox(self):
        """Gets the has_full_inbox of this CheckIfEmailExistSMTP.  # noqa: E501


        :return: The has_full_inbox of this CheckIfEmailExistSMTP.  # noqa: E501
        :rtype: bool
        """
        return self._has_full_inbox

    @has_full_inbox.setter
    def has_full_inbox(self, has_full_inbox):
        """Sets the has_full_inbox of this CheckIfEmailExistSMTP.


        :param has_full_inbox: The has_full_inbox of this CheckIfEmailExistSMTP.  # noqa: E501
        :type: bool
        """

        self._has_full_inbox = has_full_inbox

    @property
    def is_catch_all(self):
        """Gets the is_catch_all of this CheckIfEmailExistSMTP.  # noqa: E501


        :return: The is_catch_all of this CheckIfEmailExistSMTP.  # noqa: E501
        :rtype: bool
        """
        return self._is_catch_all

    @is_catch_all.setter
    def is_catch_all(self, is_catch_all):
        """Sets the is_catch_all of this CheckIfEmailExistSMTP.


        :param is_catch_all: The is_catch_all of this CheckIfEmailExistSMTP.  # noqa: E501
        :type: bool
        """

        self._is_catch_all = is_catch_all

    @property
    def is_deliverable(self):
        """Gets the is_deliverable of this CheckIfEmailExistSMTP.  # noqa: E501


        :return: The is_deliverable of this CheckIfEmailExistSMTP.  # noqa: E501
        :rtype: bool
        """
        return self._is_deliverable

    @is_deliverable.setter
    def is_deliverable(self, is_deliverable):
        """Sets the is_deliverable of this CheckIfEmailExistSMTP.


        :param is_deliverable: The is_deliverable of this CheckIfEmailExistSMTP.  # noqa: E501
        :type: bool
        """

        self._is_deliverable = is_deliverable

    @property
    def is_disabled(self):
        """Gets the is_disabled of this CheckIfEmailExistSMTP.  # noqa: E501


        :return: The is_disabled of this CheckIfEmailExistSMTP.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this CheckIfEmailExistSMTP.


        :param is_disabled: The is_disabled of this CheckIfEmailExistSMTP.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckIfEmailExistSMTP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckIfEmailExistSMTP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

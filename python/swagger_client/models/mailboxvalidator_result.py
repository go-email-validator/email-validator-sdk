# coding: utf-8

"""
    Email Validator

    All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MailboxvalidatorResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'domain': 'str',
        'is_free': 'str',
        'is_syntax': 'str',
        'is_domain': 'str',
        'is_smtp': 'str',
        'is_verified': 'str',
        'is_server_down': 'str',
        'is_greylisted': 'str',
        'is_disposable': 'str',
        'is_suppressed': 'str',
        'is_role': 'str',
        'is_high_risk': 'str',
        'is_catchall': 'str',
        'mailboxvalidator_score': 'str',
        'time_taken': 'str',
        'status': 'str',
        'credits_available': 'int',
        'error_code': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'email_address': 'email_address',
        'domain': 'domain',
        'is_free': 'is_free',
        'is_syntax': 'is_syntax',
        'is_domain': 'is_domain',
        'is_smtp': 'is_smtp',
        'is_verified': 'is_verified',
        'is_server_down': 'is_server_down',
        'is_greylisted': 'is_greylisted',
        'is_disposable': 'is_disposable',
        'is_suppressed': 'is_suppressed',
        'is_role': 'is_role',
        'is_high_risk': 'is_high_risk',
        'is_catchall': 'is_catchall',
        'mailboxvalidator_score': 'mailboxvalidator_score',
        'time_taken': 'time_taken',
        'status': 'status',
        'credits_available': 'credits_available',
        'error_code': 'error_code',
        'error_message': 'error_message'
    }

    def __init__(self, email_address=None, domain=None, is_free=None, is_syntax=None, is_domain=None, is_smtp=None, is_verified=None, is_server_down=None, is_greylisted=None, is_disposable=None, is_suppressed=None, is_role=None, is_high_risk=None, is_catchall=None, mailboxvalidator_score=None, time_taken=None, status=None, credits_available=None, error_code=None, error_message=None):  # noqa: E501
        """MailboxvalidatorResult - a model defined in Swagger"""  # noqa: E501
        self._email_address = None
        self._domain = None
        self._is_free = None
        self._is_syntax = None
        self._is_domain = None
        self._is_smtp = None
        self._is_verified = None
        self._is_server_down = None
        self._is_greylisted = None
        self._is_disposable = None
        self._is_suppressed = None
        self._is_role = None
        self._is_high_risk = None
        self._is_catchall = None
        self._mailboxvalidator_score = None
        self._time_taken = None
        self._status = None
        self._credits_available = None
        self._error_code = None
        self._error_message = None
        self.discriminator = None
        if email_address is not None:
            self.email_address = email_address
        if domain is not None:
            self.domain = domain
        if is_free is not None:
            self.is_free = is_free
        if is_syntax is not None:
            self.is_syntax = is_syntax
        if is_domain is not None:
            self.is_domain = is_domain
        if is_smtp is not None:
            self.is_smtp = is_smtp
        if is_verified is not None:
            self.is_verified = is_verified
        if is_server_down is not None:
            self.is_server_down = is_server_down
        if is_greylisted is not None:
            self.is_greylisted = is_greylisted
        if is_disposable is not None:
            self.is_disposable = is_disposable
        if is_suppressed is not None:
            self.is_suppressed = is_suppressed
        if is_role is not None:
            self.is_role = is_role
        if is_high_risk is not None:
            self.is_high_risk = is_high_risk
        if is_catchall is not None:
            self.is_catchall = is_catchall
        if mailboxvalidator_score is not None:
            self.mailboxvalidator_score = mailboxvalidator_score
        if time_taken is not None:
            self.time_taken = time_taken
        if status is not None:
            self.status = status
        if credits_available is not None:
            self.credits_available = credits_available
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message

    @property
    def email_address(self):
        """Gets the email_address of this MailboxvalidatorResult.  # noqa: E501


        :return: The email_address of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this MailboxvalidatorResult.


        :param email_address: The email_address of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def domain(self):
        """Gets the domain of this MailboxvalidatorResult.  # noqa: E501


        :return: The domain of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this MailboxvalidatorResult.


        :param domain: The domain of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def is_free(self):
        """Gets the is_free of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_free of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_free

    @is_free.setter
    def is_free(self, is_free):
        """Sets the is_free of this MailboxvalidatorResult.


        :param is_free: The is_free of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_free = is_free

    @property
    def is_syntax(self):
        """Gets the is_syntax of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_syntax of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_syntax

    @is_syntax.setter
    def is_syntax(self, is_syntax):
        """Sets the is_syntax of this MailboxvalidatorResult.


        :param is_syntax: The is_syntax of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_syntax = is_syntax

    @property
    def is_domain(self):
        """Gets the is_domain of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_domain of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_domain

    @is_domain.setter
    def is_domain(self, is_domain):
        """Sets the is_domain of this MailboxvalidatorResult.


        :param is_domain: The is_domain of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_domain = is_domain

    @property
    def is_smtp(self):
        """Gets the is_smtp of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_smtp of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_smtp

    @is_smtp.setter
    def is_smtp(self, is_smtp):
        """Sets the is_smtp of this MailboxvalidatorResult.


        :param is_smtp: The is_smtp of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_smtp = is_smtp

    @property
    def is_verified(self):
        """Gets the is_verified of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_verified of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this MailboxvalidatorResult.


        :param is_verified: The is_verified of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_verified = is_verified

    @property
    def is_server_down(self):
        """Gets the is_server_down of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_server_down of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_server_down

    @is_server_down.setter
    def is_server_down(self, is_server_down):
        """Sets the is_server_down of this MailboxvalidatorResult.


        :param is_server_down: The is_server_down of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_server_down = is_server_down

    @property
    def is_greylisted(self):
        """Gets the is_greylisted of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_greylisted of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_greylisted

    @is_greylisted.setter
    def is_greylisted(self, is_greylisted):
        """Sets the is_greylisted of this MailboxvalidatorResult.


        :param is_greylisted: The is_greylisted of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_greylisted = is_greylisted

    @property
    def is_disposable(self):
        """Gets the is_disposable of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_disposable of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_disposable

    @is_disposable.setter
    def is_disposable(self, is_disposable):
        """Sets the is_disposable of this MailboxvalidatorResult.


        :param is_disposable: The is_disposable of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_disposable = is_disposable

    @property
    def is_suppressed(self):
        """Gets the is_suppressed of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_suppressed of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_suppressed

    @is_suppressed.setter
    def is_suppressed(self, is_suppressed):
        """Sets the is_suppressed of this MailboxvalidatorResult.


        :param is_suppressed: The is_suppressed of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_suppressed = is_suppressed

    @property
    def is_role(self):
        """Gets the is_role of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_role of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_role

    @is_role.setter
    def is_role(self, is_role):
        """Sets the is_role of this MailboxvalidatorResult.


        :param is_role: The is_role of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_role = is_role

    @property
    def is_high_risk(self):
        """Gets the is_high_risk of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_high_risk of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_high_risk

    @is_high_risk.setter
    def is_high_risk(self, is_high_risk):
        """Sets the is_high_risk of this MailboxvalidatorResult.


        :param is_high_risk: The is_high_risk of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_high_risk = is_high_risk

    @property
    def is_catchall(self):
        """Gets the is_catchall of this MailboxvalidatorResult.  # noqa: E501


        :return: The is_catchall of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._is_catchall

    @is_catchall.setter
    def is_catchall(self, is_catchall):
        """Sets the is_catchall of this MailboxvalidatorResult.


        :param is_catchall: The is_catchall of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._is_catchall = is_catchall

    @property
    def mailboxvalidator_score(self):
        """Gets the mailboxvalidator_score of this MailboxvalidatorResult.  # noqa: E501


        :return: The mailboxvalidator_score of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._mailboxvalidator_score

    @mailboxvalidator_score.setter
    def mailboxvalidator_score(self, mailboxvalidator_score):
        """Sets the mailboxvalidator_score of this MailboxvalidatorResult.


        :param mailboxvalidator_score: The mailboxvalidator_score of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._mailboxvalidator_score = mailboxvalidator_score

    @property
    def time_taken(self):
        """Gets the time_taken of this MailboxvalidatorResult.  # noqa: E501


        :return: The time_taken of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._time_taken

    @time_taken.setter
    def time_taken(self, time_taken):
        """Sets the time_taken of this MailboxvalidatorResult.


        :param time_taken: The time_taken of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._time_taken = time_taken

    @property
    def status(self):
        """Gets the status of this MailboxvalidatorResult.  # noqa: E501


        :return: The status of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MailboxvalidatorResult.


        :param status: The status of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def credits_available(self):
        """Gets the credits_available of this MailboxvalidatorResult.  # noqa: E501


        :return: The credits_available of this MailboxvalidatorResult.  # noqa: E501
        :rtype: int
        """
        return self._credits_available

    @credits_available.setter
    def credits_available(self, credits_available):
        """Sets the credits_available of this MailboxvalidatorResult.


        :param credits_available: The credits_available of this MailboxvalidatorResult.  # noqa: E501
        :type: int
        """

        self._credits_available = credits_available

    @property
    def error_code(self):
        """Gets the error_code of this MailboxvalidatorResult.  # noqa: E501


        :return: The error_code of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this MailboxvalidatorResult.


        :param error_code: The error_code of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this MailboxvalidatorResult.  # noqa: E501


        :return: The error_message of this MailboxvalidatorResult.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this MailboxvalidatorResult.


        :param error_message: The error_message of this MailboxvalidatorResult.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailboxvalidatorResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailboxvalidatorResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
